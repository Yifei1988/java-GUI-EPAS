package javagui.view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import java.util.ArrayList;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Tooltip;
import javafx.stage.DirectoryChooser;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.sqlite.SQLiteConfig;

import com.mathworks.toolbox.javabuilder.MWArray;
import com.mathworks.toolbox.javabuilder.MWCharArray;
import com.mathworks.toolbox.javabuilder.MWException;
import com.mathworks.toolbox.javabuilder.MWNumericArray;
//↑↑↑connection from matlab to java
import Klss2.BKlss2;//bring Klassifikation-Function of Matlab into java
import javagui.MainApp;

public class InterfaceController {
	@FXML
	private Button btnFolderOpen;
	
	@FXML
	private Button btnKlssifi;
	
	@FXML
	final ToggleGroup tg = new ToggleGroup();
	
	@FXML
	private ToggleButton btnFace1;
	
	@FXML
	private ToggleButton btnFace2;
	
	@FXML
	private ToggleButton btnFace3;
	
	@FXML
	private ToggleButton btnFace4;
	
	@FXML
	private ToggleButton btnFace5;
	
	@FXML
	private Button btnJa;//for Analysis of Fehlerdaten with Datenbank
	
	@FXML
	private Button btnNein;//for change Fehlerat
	
	@FXML
	private Label txtFolderPath;
	
	@FXML
	private Tooltip tooltipFolderPath;
	
	@FXML
	private Label chargenNum;
	
	@FXML
	private Label bauteilNum;
	
	@FXML
	private Label scheibNum;
	
	@FXML
	private Label scheibTyp;
	
	@FXML
	private Label scheibDrm;
	
	@FXML
	private Label tool;
	
	@FXML
	private Label paste;
	
	@FXML
	private Label przGswO;
	
	@FXML
	private Label schGsw;
	
	@FXML
	private Label fu1;
	
	@FXML
	private Label przGswT;
	
	@FXML
	private Label zuFl1;
	
	@FXML
	private Label zuFl2;
	
	@FXML
	private Label zuFl3;
	
	@FXML
	private Label zuFl4;
	
	@FXML
	private Label zuFl5;
	
	@FXML
	private TextField fehler1;
	
	@FXML
	private TextField fehler2;
	
	@FXML
	private LineChart<Number, Number> lineChartTp;
	
	@FXML
	private LineChart<Number, Number> lineChartFq;
	
	@FXML
	private LineChart<Number, Number> lineChartPw;
	
	@FXML
	private ComboBox<String> ur_zu_Fehler1;
	
	@FXML
	private ComboBox<String> ur_zu_Fehler2;
	
	@FXML
	private ComboBox<String> mass_zu_Fehler1;
	
	public static String folederPath = null;//folederPath can be used everywhere in this class
	public static String fehlerart1 = null;//create static variables to pass values from Classify to FehlerAnalyse
	public static String fehlerart2 = null;
	public static String Folder_URL = "C:\\Users\\Administrator\\Desktop\\Beispiel";
	public static String DB_URL = "jdbc:sqlite:C:\\Users\\Administrator\\Desktop\\Beispiel\\epasSTUDI.db";
	
	@FXML
	public void openFolderAction(ActionEvent event) throws InterruptedException{
				
		DirectoryChooser folderOpen = new DirectoryChooser();
		//set initial Folder:
		folderOpen.setInitialDirectory(new File(Folder_URL));
		File selectedDirectory = folderOpen.showDialog(null);//String folederPath = null;
		
		if(selectedDirectory != null){
			folederPath = selectedDirectory.getAbsolutePath();//get path of the selected folder
			txtFolderPath.setText(folederPath);
			
			lineChartTp.getData().clear();
			lineChartFq.getData().clear();
			lineChartPw.getData().clear();//the linechart cleared after open a new Folder
			fehler1.clear();
			btnJa.setDisable(true);//在klassifikation使用之前不得使用数据库功能
			ur_zu_Fehler1.getItems().clear();
			mass_zu_Fehler1.getItems().clear();
//			ur_zu_Fehler1.setItems(null);
//			ur_zu_Fehler1.setSelectionModel(null);
//			mass_zu_Fehler1.setItems(null);
		}
		else{
			System.out.println("Kein Ordner!");
			return;
		}
		
		tooltipFolderPath.setText(folederPath);//[tool-tip] get path of selected folder
		
	//【read Einstellungen in Labels】:		
		String filePath_log_part = "\\log.txt"; 		
		String filePath_log_full = folederPath + filePath_log_part;
		//get path of log.txt(Einstellungen) in the selected folder
		
		//【print all the Information from log.txt line by line】:
		try (BufferedReader br = new BufferedReader(new FileReader(filePath_log_full))) {
			String line;
			int i=1;
			while ((line = br.readLine()) != null) {
			//	System.out.println(line);
				if(i==1){chargenNum.setText(line);}
				if(i==2){bauteilNum.setText(line);}
				if(i==3){scheibNum.setText(line);}
				if(i==4){scheibTyp.setText(line);}
				if(i==5){scheibDrm.setText(line);}
				if(i==6){tool.setText(line);}
				if(i==7){paste.setText(line);}
				if(i==8){przGswO.setText(line);}
				if(i==9){schGsw.setText(line);}
				if(i==10){fu1.setText(line);}
				if(i==11){przGswT.setText(line);}
				if(i==12){zuFl1.setText(line);}
				if(i==13){zuFl2.setText(line);}
				if(i==14){zuFl3.setText(line);}
				if(i==15){zuFl4.setText(line);}
				if(i==16){zuFl5.setText(line);}
				else{}
				i++;
			}//end while
			i=0;
		} catch (IOException e) {e.printStackTrace();}
		
		readinTemp();//read the value of Temp. in program 
		
		btnFace1.setDisable(false);
		btnFace2.setDisable(false);
		btnFace3.setDisable(false);
		btnFace4.setDisable(false);
		btnFace5.setDisable(false);
		
	}//end Method of OpenFolderButton
	
	public void switchFaceAction1(ActionEvent event){
		lineChartFq.getData().clear();
		lineChartPw.getData().clear();
		String filePath_freq_part2 = "_f1.txt";
		readinFrequenz(filePath_freq_part2);
		String filePath_pow_part2 = "_f1.txt";
		readinPower(filePath_pow_part2);
	}
	public void switchFaceAction2(ActionEvent event){
		lineChartFq.getData().clear();
		lineChartPw.getData().clear();
		String filePath_freq_part2 = "_f2.txt"; 
		readinFrequenz(filePath_freq_part2);
		String filePath_pow_part2 = "_f2.txt";
		readinPower(filePath_pow_part2);
	}
	public void switchFaceAction3(ActionEvent event){
		lineChartFq.getData().clear();
		lineChartPw.getData().clear();
		String filePath_freq_part2 = "_f3.txt"; 
		readinFrequenz(filePath_freq_part2);
		String filePath_pow_part2 = "_f3.txt";
		readinPower(filePath_pow_part2);
	}
	public void switchFaceAction4(ActionEvent event){
		lineChartFq.getData().clear();
		lineChartPw.getData().clear();
		String filePath_freq_part2 = "_f4.txt"; 
		readinFrequenz(filePath_freq_part2);
		String filePath_pow_part2 = "_f4.txt";
		readinPower(filePath_pow_part2);
	}
	public void switchFaceAction5(ActionEvent event){
		lineChartFq.getData().clear();
		lineChartPw.getData().clear();
		String filePath_freq_part2 = "_f5.txt"; 
		readinFrequenz(filePath_freq_part2);
		String filePath_pow_part2 = "_f5.txt";
		readinPower(filePath_pow_part2);
	}
	
	private void readinTemp() {
		String filePath_temp_part = "\\temp.txt"; 
		String filePath_temp_full = folederPath + filePath_temp_part;
		//get path of temp.txt(Temperature) in the selected folder
		
		int tp=0;
		try (BufferedReader br = new BufferedReader(new FileReader(filePath_temp_full))) {
			String line;//every line is a value of Temperature
			
			lineChartTp.setTitle("Temperatur");
			XYChart.Series<Number, Number> series = new XYChart.Series<>();
			lineChartTp.setAnimated(false);
			
			int i=1;
			while ((line = br.readLine()) != null) {
			//	System.out.println(line);
				tp = Integer.parseInt((String)line);
				series.getData().add(new XYChart.Data<>(i,tp));
				i++;
			}//end while
			lineChartTp.getData().add(series);
		} catch (IOException e) {e.printStackTrace();}
	}

	private void readinFrequenz(String filePath_freq_part2) {
		Long startTime = System.currentTimeMillis();
		
		String filePath_freq_part1 = "\\freq"; 
		String filePath_freq_full = folederPath + filePath_freq_part1 + filePath_freq_part2;
		//get path of freq.txt(Frequenz) in the selected folder

		int fq=0;
		try (BufferedReader br = new BufferedReader(new FileReader(filePath_freq_full))) {
			String line;//every line is a value of Frequenz
			
			lineChartFq.setTitle("Frequenz");
			XYChart.Series<Number, Number> series = new XYChart.Series<Number, Number>();
			lineChartFq.setAnimated(false);
			
			int i=1;
			while ((line = br.readLine()) != null) {
			//	System.out.println(line);
				fq = Integer.parseInt((String)line);
				series.getData().add(new XYChart.Data<>(i,fq));
				i++;
			}//end while
			lineChartFq.getData().add(series);
		} catch (IOException e) {e.printStackTrace();}
		
		Long endTime = System.currentTimeMillis();
		System.out.println("Loadtime: "+(endTime - startTime)+"ms"); 
	}
	

	private void readinPower(String filePath_pow_part2) {
		String filePath_pow_part1 = "\\pow"; 
		String filePath_pow_full = folederPath + filePath_pow_part1 + filePath_pow_part2;
		//get path of pow.txt(Spannung/Power) in the selected folder

		int pw=0;
		try (BufferedReader br = new BufferedReader(new FileReader(filePath_pow_full))) {
			String line;//every line is a value of Spannung/Power
			
			lineChartPw.setTitle("Spannung");
			XYChart.Series<Number, Number> series = new XYChart.Series<>();
			lineChartPw.setAnimated(false);
			
			int i=1;
			while ((line = br.readLine()) != null) {
			//	System.out.println(line);
				pw = Integer.parseInt((String)line);
				series.getData().add(new XYChart.Data<>(i,pw));
				i++;
			}//end while
			lineChartPw.getData().add(series);
		} catch (IOException e) {e.printStackTrace();}
	}
	
	@FXML//work with Matlab-Programm!!!!!!!!!!!!!!!!!!!!
	public void klassifikationAction(ActionEvent event) throws MWException{
		fehler1.setEditable(false);
		fehler1.clear();
		
		double m =3;//this value can be changed!
		MWNumericArray input_a = new MWNumericArray(m);;
		MWCharArray output_e = null;
		
		try{
			BKlss2 fehler_from_matlab = new BKlss2();
			Object[] result = fehler_from_matlab.Klss2(1,input_a);//1 means one value as input
			output_e = new MWCharArray(result[0]);
			System.out.println(output_e);
			fehlerart1 = String.valueOf(output_e);
			fehler1.setText(fehlerart1);
		}finally{
			MWArray.disposeArray(input_a);
			MWArray.disposeArray(output_e);
		}
		
		btnJa.setDisable(false);//现在可以进行数据分析、点击【Ja】了
		btnNein.setDisable(false);//现在可以修改Fehler类型、点击【Nein】了
	}//end of Classify
	
	@FXML//work with SQLite-Datenbanke!!!!!!!!!!!!!!!!!!!!
	public void datenAnalyseAction(ActionEvent event) throws MWException, ClassNotFoundException{
		ur_zu_Fehler1.setItems(datenAnalyse_ur(fehlerart1));
		ur_zu_Fehler1.getSelectionModel().selectFirst();//默认选择第一个Ursache
		String selectedUrsache = ur_zu_Fehler1.getSelectionModel().getSelectedItem().toString();
		mass_zu_Fehler1.setItems(datenAnalyse_mass(selectedUrsache));
		mass_zu_Fehler1.getSelectionModel().selectFirst();//默认选择第一个Massnahme
		//以下这一大坨是对combobox的选择值进行监听，具体没搞懂……
		ur_zu_Fehler1.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Object>() {
			 @Override
			 public void changed(ObservableValue<?> observable, Object oldValue, Object newValue) {
				 if(newValue != null){
					 String selectedUrsache = ur_zu_Fehler1.getSelectionModel().getSelectedItem().toString();
					 try {
						mass_zu_Fehler1.setItems(datenAnalyse_mass(selectedUrsache));
						mass_zu_Fehler1.getSelectionModel().selectFirst();
					} catch (ClassNotFoundException e) {
						e.printStackTrace();
					}
				 }
			 }
		});
	}//end of FehlerAnalyse

///////////////////////////////////↓↓↓Datenbank↓↓↓///////////////////////////////////////////////	
	public ObservableList<String> datenAnalyse_ur(String fehlerart) throws ClassNotFoundException {		
		Connection connection = null;
		ResultSet resultSet = null;
		Statement statement = null;
		System.out.println(fehlerart + " is now passed into Datebank");
		
		ObservableList<String> urbesch_ArrLst = FXCollections.observableArrayList(); 
		//用ObservableList建立动态数组用于接收DB内容【原因描述】，并向外传递
		try {
			Class.forName("org.sqlite.JDBC");
			SQLiteConfig config = new SQLiteConfig(); 
			config.enforceForeignKeys(true); 
			connection = DriverManager.getConnection(DB_URL,config.toProperties());
			statement = connection.createStatement();

			//根据缺陷名称找《Fehlerart》表中的Fehlerart_id
			resultSet = statement.executeQuery("select Fehlerart_id from Fehlerart where Fehlername = '"+fehlerart+"'");
			String fehler_id = resultSet.getString("Fehlerart_id");
			resultSet.close();
			System.out.println("Fehlerart_id = " +fehler_id);
			
			//根据Fehlerart_id找《FZuordnung》表中的Ursache_id
			resultSet = statement.executeQuery("select Ursache_id from Zuordnung where Fehlerart_id = '"+fehler_id+"'");
			String ursache_id_old = "";
			String ursache_id_new = "";
			
			ArrayList<String> urid_ArrLst = new ArrayList<String>();//用Arraylist建立动态数组用于接收db内容【原因id】
			int n_ur = 0;//n_ur用来计数针对给定的这个缺陷有多少个不重复的Ursache
			while (resultSet.next()){
				ursache_id_new = resultSet.getString("Ursache_id");
				if(ursache_id_old.equals(ursache_id_new)==false){
					System.out.println("Ursache_id = " + ursache_id_new);
					urid_ArrLst.add(resultSet.getString("Ursache_id"));
					n_ur ++;
				}
				ursache_id_old = ursache_id_new;
			}

			String[] urid_Arr = new String[n_ur];//建立1个长度为n_ur的一般数组，用于接收ArrayList中的内容【原因id】
//			ArrayList<String> urbesch_ArrLst = new ArrayList<String>();//用ArrayList建立动态数组用于接收DB内容【原因描述】
//			ObservableList<String> urbesch_ArrLst = FXCollections.observableArrayList(); 
			String[] urbesch_Arr = new String[n_ur];//建立1个长度为n_ur的一般数组，用于接收ArrayList的内容【原因描述】
			for (int i = 0; i < n_ur; i++){
				urid_Arr[i] = urid_ArrLst.get(i);//【原因id】从ArrayList交给一般数组
				resultSet = statement.executeQuery("select Ursachebeschreibung from Ursache where Ursache_id = '"+urid_Arr[i]+"'");
				urbesch_ArrLst.add(resultSet.getString("Ursachebeschreibung"));
				urbesch_Arr[i] = urbesch_ArrLst.get(i);//【原因描述】从ArrayList交给一般数组
	        	System.out.println("Ursache" + urid_Arr[i] + ": " + urbesch_Arr[i]);
			}
		}
		catch(SQLException e){
			System.err.println(e.getMessage());
			// if the error message is "out of memory", it probably means no database file is found
		}
		finally{
			try{
				resultSet.close();
				statement.close();
				connection.close(); 
			}
			catch (Exception e){
				System.err.println(e);// connection close failed.
			}
		}
		return urbesch_ArrLst;
	}
	
	public ObservableList<String> datenAnalyse_mass(String selectedUrsache) throws ClassNotFoundException {
		Connection connection = null;
		ResultSet resultSet = null;
		Statement statement = null;
		System.out.println(selectedUrsache + " is now passed into Datebank");
		
		ObservableList<String> massbesch_ArrLst = FXCollections.observableArrayList();
		//用ObservableList建立动态数组用于接收DB内容【措施描述】，并向外传递
		try {
			Class.forName("org.sqlite.JDBC");
			SQLiteConfig config = new SQLiteConfig(); 
			config.enforceForeignKeys(true); 
			connection = DriverManager.getConnection(DB_URL,config.toProperties());
			statement = connection.createStatement();
			
			//根据措施描述找《Ursache》表中的Ursache_id
			resultSet = statement.executeQuery("select Ursache_id from Ursache where Ursachebeschreibung = '"+selectedUrsache+"'");
			String ursache_id = resultSet.getString("Ursache_id");
			resultSet.close();
			System.out.println("Ursache_id = " +ursache_id);
			
			//根据Ursache_id找《Zuordnung》表中的Massnahme_id
			resultSet = statement.executeQuery("select Massnahme_id from Zuordnung where Ursache_id = '"+ursache_id+"'");
			ArrayList<String> massid_ArrLst = new ArrayList<String>();//用Arraylist建立动态数组用于接收db内容【措施id】
			int n_mass = 0;//n_mass用来计数针对当下这个原因有多少个Massnahme
			while (resultSet.next()){
				massid_ArrLst.add(resultSet.getString("Massnahme_id"));
				n_mass ++;
			}
			String[] massid_Arr = new String[n_mass];//建立1个长度为n_mass的一般数组，用于接收ArrayList中的内容【措施id】
			String[] massbesch_Arr = new String[n_mass];//建立1个长度为n_mass的一般数组，用于接收ArrayList的内容【措施描述】
	        for (int j = 0; j < n_mass; j++) {
	        	massid_Arr[j] = massid_ArrLst.get(j);//【措施id】从ArrayList交给一般数组
	        	resultSet = statement.executeQuery("select Massnahmebeschreibung from Massnahme where Massnahme_id = '"+massid_Arr[j]+"'");
	        	massbesch_ArrLst.add(resultSet.getString("Massnahmebeschreibung"));
				massbesch_Arr[j] = massbesch_ArrLst.get(j);//【措施描述】从ArrayList交给一般数组
	        	System.out.println("Massnahme" + massid_Arr[j] + ": " + massbesch_Arr[j]);
	        }
		}
		catch(SQLException e){
			System.err.println(e.getMessage());
		}
		finally{
			try{
				resultSet.close();
				statement.close();
				connection.close(); 
			}
			catch (Exception e){
				System.err.println(e);// connection close failed.
			}
		}
		
		return massbesch_ArrLst;		
	}
///////////////////////////////////↑↑↑Datenbank↑↑↑///////////////////////////////////////////////		
	@FXML
	public void fehlerEdit(ActionEvent event) throws MWException, ClassNotFoundException{
		ur_zu_Fehler1.getItems().clear();
		mass_zu_Fehler1.getItems().clear();
//		DialogFehlerController dialog = new DialogFehlerController();
//		dialog.fehlerKorrigieren(fehlerart1);
		MainApp.showDialogFeler(fehlerart1);
		fehler1.setText(fehlerart1);
		fehler2.setText(fehlerart2);
	}
	
}
