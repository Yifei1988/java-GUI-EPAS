package javagui.view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Series;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Tooltip;
import javafx.stage.DirectoryChooser;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.sqlite.SQLiteConfig;

import com.mathworks.toolbox.javabuilder.MWArray;
import com.mathworks.toolbox.javabuilder.MWCharArray;
import com.mathworks.toolbox.javabuilder.MWException;
import com.mathworks.toolbox.javabuilder.MWNumericArray;
//↑↑↑connection from matlab to java
import Klss2.BKlss2;//bring Klassifikation-Function of Matlab into java
import javagui.MainApp;

public class InterfaceController {
	@FXML
	private Button btnFolderOpen;
	
	@FXML
	private Button btnKlssifi;
	
	@FXML
	final ToggleGroup tg = new ToggleGroup();
	
	@FXML
	private ToggleButton btnFace1;	
	@FXML
	private ToggleButton btnFace2;	
	@FXML
	private ToggleButton btnFace3;	
	@FXML
	private ToggleButton btnFace4;	
	@FXML
	private ToggleButton btnFace5;
	
	@FXML
	private Button btnJa;//for Analysis of Fehlerdaten with Datenbank	
	@FXML
	private Button btnNein;//for change Fehlerat
	@FXML
	private Button btnJaUnten;//for save	
	@FXML
	private Button btnNeinUnten;//for change Massnahme
	
	@FXML
	private Label txtFolderPath;
	
	@FXML
	private Tooltip tooltipFolderPath;
	
	@FXML
	private Label chargenNum;	
	@FXML
	private Label bauteilNum;	
	@FXML
	private Label scheibNum;	
	@FXML
	private Label scheibTyp;	
	@FXML
	private Label scheibDrm;	
	@FXML
	private Label tool;	
	@FXML
	private Label paste;	
	@FXML
	private Label przGswO;	
	@FXML
	private Label schGsw;	
	@FXML
	private Label fu1;	
	@FXML
	private Label przGswT;	
	@FXML
	private Label zuFl1;	
	@FXML
	private Label zuFl2;
	@FXML
	private Label zuFl3;	
	@FXML
	private Label zuFl4;	
	@FXML
	private Label zuFl5;
	
	@FXML
	private TextField fehler1;	
	@FXML
	private TextField fehler2;
	@FXML
	private TextField fehler3;
	@FXML
	private TextField fehler4;
	@FXML
	private TextField fehler5;
	
	@FXML
	private LineChart<Number, Number> lineChartML;	
	@FXML
	private LineChart<Number, Number> lineChartKrf;	
	@FXML
	private LineChart<Number, Number> lineChartMm;
	
	@FXML
	private ComboBox<String> ur_zu_Fehler1;	
	@FXML
	private ComboBox<String> ur_zu_Fehler2;
	@FXML
	private ComboBox<String> ur_zu_Fehler3;	
	@FXML
	private ComboBox<String> ur_zu_Fehler4;
	@FXML
	private ComboBox<String> ur_zu_Fehler5;
	
	
	@FXML
	private ComboBox<String> mass_zu_Fehler1;
	@FXML
	private ComboBox<String> mass_zu_Fehler2;
	@FXML
	private ComboBox<String> mass_zu_Fehler3;
	@FXML
	private ComboBox<String> mass_zu_Fehler4;
	@FXML
	private ComboBox<String> mass_zu_Fehler5;
	
	public static String folederPath = null;//folederPath can be used everywhere in this class
	
	public static int faceSeNum = 0;//默认设定面序号为0
	
	public static String fehlerart1 = null;//create static variables to pass values from Classify to FehlerAnalyse
	public static String fehlerart2 = null;
	public static String fehlerart3 = null;
	public static String fehlerart4 = null;
	public static String fehlerart5 = null;
	
	public static ObservableList<String> massZuFehler1 = null;//create static variables to pass values from Databank to Massnahme-Feld
	public static ObservableList<String> massZuFehler2 = null;
	public static ObservableList<String> massZuFehler3 = null;
	public static ObservableList<String> massZuFehler4 = null;
	public static ObservableList<String> massZuFehler5 = null;
	
	public static ObservableList<String> massZuFehler1Dialog = null;//专为DialogMassnahme而设
	public static ObservableList<String> massZuFehler2Dialog = null;
	public static ObservableList<String> massZuFehler3Dialog = null;
	public static ObservableList<String> massZuFehler4Dialog = null;
	public static ObservableList<String> massZuFehler5Dialog = null;
	
	public static String[] massVorschlagFace1 = null;
/*	public static String massVorschlagFace1 = null;//用于DialogMassnahme和保存text文档
	public static String massVorschlagFace2 = null;
	public static String massVorschlagFace3 = null;
	public static String massVorschlagFace4 = null;
	public static String massVorschlagFace5 = null;*/
	
	public static String Folder_URL = "C:\\Users\\Administrator\\Desktop\\Beispiel";
	public static String DB_URL = "jdbc:sqlite:C:\\Users\\Administrator\\Desktop\\Beispiel\\epasSTUDI.db";
	
	@FXML
	public void openFolderAction(ActionEvent event) throws InterruptedException{				
		DirectoryChooser folderOpen = new DirectoryChooser();
		//set initial Folder:
		folderOpen.setInitialDirectory(new File(Folder_URL));
		File selectedDirectory = folderOpen.showDialog(null);//String folederPath = null;
		
		if(selectedDirectory != null){
			folederPath = selectedDirectory.getAbsolutePath();//get path of the selected folder
			txtFolderPath.setText(folederPath);
			
			lineChartInitial();//the linechart cleared after open a new Folder
//			btnJa.setDisable(true);//在klassifikation使用之前不得使用数据库及衍生功能
//			btnNein.setDisable(true);
//			btnJaUnten.setDisable(true);
//			btnNeinUnten.setDisable(true);
			btnFace1.setSelected(false);
			btnFace2.setSelected(false);
			btnFace3.setSelected(false);
			btnFace4.setSelected(false);
			btnFace5.setSelected(false);
			stringForReportInitial();
			fehler_ReportInitial();
			ursache_ReportInitial();
			mass_ReportInitial();
		}
		else{
			System.out.println("Kein Ordner!");
			return;
		}
		
		tooltipFolderPath.setText(folederPath);//[tool-tip] get path of selected folder
		
	//【read Einstellungen in Labels】:		
		String filePath_log_part = "\\log.txt"; 		
		String filePath_log_full = folederPath + filePath_log_part;
		//get path of log.txt(Einstellungen) in the selected folder
		
		//【print all the Information from log.txt line by line】:
		try (BufferedReader br = new BufferedReader(new FileReader(filePath_log_full))) {
			String line;
			int i=1;
			while ((line = br.readLine()) != null) {
			//	System.out.println(line);
				if(i==1){chargenNum.setText(line);}
				if(i==2){bauteilNum.setText(line);}
				if(i==3){scheibNum.setText(line);}
				if(i==4){scheibTyp.setText(line);}
				if(i==5){scheibDrm.setText(line);}
				if(i==6){tool.setText(line);}
				if(i==7){paste.setText(line);}
				if(i==8){przGswO.setText(line);}
				if(i==9){schGsw.setText(line);}
				if(i==10){fu1.setText(line);}
				if(i==11){przGswT.setText(line);}
				if(i==12){zuFl1.setText(line);}
				if(i==13){zuFl2.setText(line);}
				if(i==14){zuFl3.setText(line);}
				if(i==15){zuFl4.setText(line);}
				if(i==16){zuFl5.setText(line);}
				else{}
				i++;
			}//end while
			i=0;
		} catch (IOException e) {e.printStackTrace();}
		
		btnFace1.setDisable(false);
		btnFace2.setDisable(false);
		btnFace3.setDisable(false);
		btnFace4.setDisable(false);
		btnFace5.setDisable(false);
		
	}//end Method of OpenFolderButton
	
	@FXML
	public void lineChartInitial(){
		lineChartML.getData().clear();
		lineChartKrf.getData().clear();
		lineChartMm.getData().clear();
	}
	
	public void switchFaceAction1(ActionEvent event){
		stringForReportInitial();
		switchFace("_f1.txt");
		faceSeNum = 1;
	}
	public void switchFaceAction2(ActionEvent event){
		stringForReportInitial();
		switchFace("_f2.txt");
		faceSeNum = 2;
	}
	public void switchFaceAction3(ActionEvent event){
		stringForReportInitial();
		switchFace("_f3.txt");
		faceSeNum = 3;
	}
	public void switchFaceAction4(ActionEvent event){
		stringForReportInitial();
		switchFace("_f4.txt");
		faceSeNum = 4;
	}
	public void switchFaceAction5(ActionEvent event){
		stringForReportInitial();
		switchFace("_f5.txt");
		faceSeNum = 5;
	}
	
	public void switchFace(String filePath_part){
		lineChartInitial();
		String filePath_lst_part = filePath_part;
		readinMotorLeistung(filePath_lst_part);
		String filePath_krf_part = filePath_part; 
		readinKraefte(filePath_krf_part);
		String filePath_mm_part = filePath_part;
		readinMomente(filePath_mm_part);
	}
	
	private void readinMotorLeistung(String filePath_lst_part) {
		String filePath_lst_full = folederPath + "\\lst" + filePath_lst_part;
		//get path of lst.txt(MotorLeistung) in the selected folder
		
//		lineChartML.setTitle("Motor Leistung [W]");		
//		lineChartML.setAnimated(false);
		lineChartML.getData().add(drawLineChart(filePath_lst_full, "P"));
	}
	
	private void readinKraefte(String filePath_krf_part) {
		Long startTime = System.currentTimeMillis();
		
		String filePath_krf_x_full = folederPath + "\\krf_x" + filePath_krf_part;
		String filePath_krf_y_full = folederPath + "\\krf_y" + filePath_krf_part;
		String filePath_krf_z_full = folederPath + "\\krf_z" + filePath_krf_part;
		//get path of krf.txt(Kraefte) in the selected folder
		
//		lineChartKrf.setTitle("Kraefte [N]");
//		lineChartKrf.setAnimated(false);
		lineChartKrf.getData().add(drawLineChart(filePath_krf_x_full,"Fx"));
		lineChartKrf.getData().add(drawLineChart(filePath_krf_y_full,"Fy"));
		lineChartKrf.getData().add(drawLineChart(filePath_krf_z_full,"Fz"));
		
		Long endTime = System.currentTimeMillis();
		
		System.out.println("Loadtime: "+(endTime - startTime)+"ms"); 
	}

	private void readinMomente(String filePath_mm_part) {
		String filePath_mm_x_full = folederPath + "\\mm_x" + filePath_mm_part;
		String filePath_mm_y_full = folederPath + "\\mm_y" + filePath_mm_part;
		String filePath_mm_z_full = folederPath + "\\mm_z" + filePath_mm_part;
		//get path of mm.txt(Momente) in the selected folder
		
//		lineChartMm.setTitle("Momente [Nm]");		
//		lineChartMm.setAnimated(false);
		lineChartMm.getData().add(drawLineChart(filePath_mm_x_full,"Tx"));
		lineChartMm.getData().add(drawLineChart(filePath_mm_y_full,"Ty"));
		lineChartMm.getData().add(drawLineChart(filePath_mm_z_full,"Tz"));
	}
	
	public Series<Number, Number> drawLineChart(String filePath_full, String name){
		XYChart.Series<Number, Number> series = new XYChart.Series<Number, Number>();
		series.setName(name);
		int y=0;//y是折线图的y轴
		try (BufferedReader br = new BufferedReader(new FileReader(filePath_full))) {
			String line;//every line is a value of something from txt
			
			int x=1;//x是折线图的x轴
			while ((line = br.readLine()) != null) {
			//	System.out.println(line);
				y = Integer.parseInt((String)line);
				series.getData().add(new XYChart.Data<>(x,y));
				x++;
			}//end while

		} catch (IOException e) {e.printStackTrace();}
		return series;
	}
	
	public void stringForReportInitial(){
		faceSeNum = 0;
		
		fehlerart1 = null;
		fehlerart2 = null;
		fehlerart3 = null;
		fehlerart4 = null;
		fehlerart5 = null;
		
		massZuFehler1 = null;
		massZuFehler2 = null;
		massZuFehler3 = null;
		massZuFehler4 = null;
		massZuFehler5 = null;
		
		massZuFehler1Dialog = null;
		massZuFehler2Dialog = null;
		massZuFehler3Dialog = null;
		massZuFehler4Dialog = null;
		massZuFehler5Dialog = null;
	}
	
	@FXML//work with Matlab-Programm!!!!!!!!!!!!!!!!!!!!
	public void klassifikationAction(ActionEvent event) throws MWException{
		fehler_ReportInitial();//清空报告栏
		ursache_ReportInitial();
		mass_ReportInitial();
		stringForReportInitial();
		
		double m =3;//this value can be changed!
		MWNumericArray input_a = new MWNumericArray(m);;
		MWCharArray output_e = null;
		
		try{
			BKlss2 fehler_from_matlab = new BKlss2();
			Object[] result = fehler_from_matlab.Klss2(1,input_a);//1 means one value as input
			output_e = new MWCharArray(result[0]);
			System.out.println(output_e);
			fehlerart1 = String.valueOf(output_e);
			fehler1.setText(fehlerart1);
		}finally{
			MWArray.disposeArray(input_a);
			MWArray.disposeArray(output_e);
		}
		
		btnJa.setDisable(false);//现在可以进行数据分析、点击【Ja】了
		btnNein.setDisable(false);//现在可以修改Fehler类型、点击【Nein】了
	}//end of Classify
	
	@FXML
	public void fehlerEdit(ActionEvent event) throws MWException, ClassNotFoundException{//btnNein的功能
		ursache_ReportInitial();
		mass_ReportInitial();
		MainApp.showDialogFeler();
		fehler1.setText(fehlerart1);
		fehler2.setText(fehlerart2);
		fehler3.setText(fehlerart3);
		fehler4.setText(fehlerart4);
		fehler5.setText(fehlerart5);
		
		btnJaUnten.setDisable(true);
		btnNeinUnten.setDisable(true);
		
		if(fehlerart1 == null){
			btnJa.setDisable(true);
		}
	}
	
	@FXML//work with SQLite-Datenbanke!!!!!!!!!!!!!!!!!!!!
	public void datenAnalyseAction(ActionEvent event) throws MWException, ClassNotFoundException{
		if(fehlerart1 != null){
			ur_zu_Fehler1.setItems(datenAnalyse(fehlerart1, 1));
			ur_zu_Fehler1.getSelectionModel().selectFirst();//默认选择（显示）第一个Ursache
		}
		if(fehlerart2 != null){
			ur_zu_Fehler2.setItems(datenAnalyse(fehlerart2, 2));
			ur_zu_Fehler2.getSelectionModel().selectFirst();
		}
		if(fehlerart3 != null){
			ur_zu_Fehler3.setItems(datenAnalyse(fehlerart3, 3));
			ur_zu_Fehler3.getSelectionModel().selectFirst();
		}
		if(fehlerart4 != null){
			ur_zu_Fehler4.setItems(datenAnalyse(fehlerart4, 4));
			ur_zu_Fehler4.getSelectionModel().selectFirst();
		}
		if(fehlerart5 != null){
			ur_zu_Fehler5.setItems(datenAnalyse(fehlerart5, 5));
			ur_zu_Fehler5.getSelectionModel().selectFirst();
		}

		if(massZuFehler1 != null){
			mass_zu_Fehler1.setItems(massZuFehler1);
			mass_zu_Fehler1.getSelectionModel().selectFirst();//默认选择（显示）第一个Massnahme
		}
		if(massZuFehler2 != null){
			mass_zu_Fehler2.setItems(massZuFehler2);
			mass_zu_Fehler2.getSelectionModel().selectFirst();
		}
		if(massZuFehler3 != null){
			mass_zu_Fehler3.setItems(massZuFehler3);
			mass_zu_Fehler3.getSelectionModel().selectFirst();
		}
		if(massZuFehler4 != null){
			mass_zu_Fehler4.setItems(massZuFehler4);
			mass_zu_Fehler4.getSelectionModel().selectFirst();
		}
		if(massZuFehler5 != null){
			mass_zu_Fehler5.setItems(massZuFehler5);
			mass_zu_Fehler5.getSelectionModel().selectFirst();
		}
		
		btnJaUnten.setDisable(false);//执行数据库分析后可以使用下方的Ja和Nein按钮用于保存和更改Massnahme
		btnNeinUnten.setDisable(false);
	}//end of FehlerAnalyse

///////////////////////////////////↓↓↓Datenbank↓↓↓///////////////////////////////////////////////	
	public ObservableList<String> datenAnalyse(String fehlerart, int fNr) throws ClassNotFoundException {		
		Connection connection = null;
		ResultSet resultSet = null;
		Statement statement = null;
		System.out.println(fehlerart + " is now passed into Datebank");
		
		ObservableList<String> urbesch_ArrLst = FXCollections.observableArrayList(); 
		//用ObservableList建立动态数组用于接收DB内容【原因描述】，并向外传递，用于之后找Massnahme
		ObservableList<String> urbesch_ArrLst_s = FXCollections.observableArrayList(); 
		//同上，尾标的s是表示用于存储加序号的版本，用于最终的返回值
		
		ObservableList<String> massbesch_ArrLst = FXCollections.observableArrayList();
		ObservableList<String> massbesch_ArrLst_Dialog = FXCollections.observableArrayList();
		//专为后面DialogMassnahme的显示处理所添加的变量
		
		try {
			Class.forName("org.sqlite.JDBC");
			SQLiteConfig config = new SQLiteConfig(); 
			config.enforceForeignKeys(true); 
			connection = DriverManager.getConnection(DB_URL,config.toProperties());
			statement = connection.createStatement();

			//根据缺陷名称找《Fehlerart》表中的Fehlerart_id
			resultSet = statement.executeQuery("select Fehlerart_id from Fehlerart where Fehlername = '"+fehlerart+"'");
			String fehler_id = resultSet.getString("Fehlerart_id");
			resultSet.close();
//			System.out.println("Fehlerart_id = " +fehler_id);
			
			//根据Fehlerart_id找《FZuordnung》表中的Ursache_id
			resultSet = statement.executeQuery("select Ursache_id from Zuordnung where Fehlerart_id = '"+fehler_id+"'");
			String ursache_id_old = "";
			String ursache_id_new = "";
			
			ArrayList<String> urid_ArrLst = new ArrayList<String>();//用Arraylist建立动态数组用于接收db内容【原因id】
			int n_ur = 0;//n_ur用来计数针对给定的这个缺陷有多少个不重复的Ursache
			while (resultSet.next()){
				ursache_id_new = resultSet.getString("Ursache_id");
				if(ursache_id_old.equals(ursache_id_new)==false){
//					System.out.println("Ursache_id = " + ursache_id_new);
					urid_ArrLst.add(resultSet.getString("Ursache_id"));
					n_ur ++;
				}
				ursache_id_old = ursache_id_new;
			}
			
			String[] urid_Arr = new String[n_ur];//建立1个长度为n_ur的一般数组，用于接收ArrayList中的内容【原因id】
//			ArrayList<String> urbesch_ArrLst = new ArrayList<String>();//用ArrayList建立动态数组用于接收DB内容【原因描述】
//			ObservableList<String> urbesch_ArrLst = FXCollections.observableArrayList(); 
			String[] urbesch_Arr = new String[n_ur];//建立1个长度为n_ur的一般数组，用于接收ArrayList的内容【原因描述】
			for (int i = 0; i < n_ur; i++){
				urid_Arr[i] = urid_ArrLst.get(i);//【原因id】从ArrayList交给一般数组
				
				//根据Ursache_id找《Ursache》表中的Ursachebeschreibung
				resultSet = statement.executeQuery("select Ursachebeschreibung from Ursache where Ursache_id = '"+urid_Arr[i]+"'");
				int ni = i + 1;
				String si = "" + ni;//用于在Ursache前加序号
				urbesch_ArrLst_s.add(si + ". " + resultSet.getString("Ursachebeschreibung"));
				urbesch_ArrLst.add(resultSet.getString("Ursachebeschreibung"));
				resultSet.close();
				urbesch_Arr[i] = urbesch_ArrLst.get(i);//【原因描述】从ArrayList交给一般数组
//	        	System.out.println("Ursache" + urid_Arr[i] + ": " + urbesch_Arr[i]);
	        	
	        	massbesch_ArrLst.add("zur Ursache" + si + " (" + urbesch_Arr[i] + "):");
	        	massbesch_ArrLst_Dialog.add("zur Ursache" + si + " (" + urbesch_Arr[i] + "):" + "LessIsMore");
	        	
	        	//根据措施描述找《Ursache》表中的Ursache_id
//				resultSet = statement.executeQuery("select Ursache_id from Ursache where Ursachebeschreibung = '"+urbesch_Arr[i]+"'");
//				String ursache_id = resultSet.getString("Ursache_id");
//				resultSet.close();
//				System.out.println("Ursache_id = " +ursache_id);
				
				//根据Ursache_idFe以及hlerart_id（以防措施出现重复）找《Zuordnung》表中的Massnahme_id
	        	resultSet = statement.executeQuery("select Massnahme_id from Zuordnung where Ursache_id = '"+urid_Arr[i]+"' and Fehlerart_id = '"+fehler_id+"'");

				ArrayList<String> massid_ArrLst = new ArrayList<String>();//用Arraylist建立动态数组用于接收db内容【措施id】
				int n_mass = 0;//n_mass用来计数针对当下这个原因有多少个Massnahme
				while (resultSet.next()){
					massid_ArrLst.add(resultSet.getString("Massnahme_id"));
					n_mass ++;
				}
				String[] massid_Arr = new String[n_mass];//建立1个长度为n_mass的一般数组，用于接收ArrayList中的内容【措施id】
				String[] massbesch_Arr = new String[n_mass];//建立1个长度为n_mass的一般数组，用于接收ArrayList的内容【措施描述】
		        for (int j = 0; j < n_mass; j++) {
		        	int nj = j + 1;
					String sj = "" + nj;//用于在Massnahme前加序号
		        	massid_Arr[j] = massid_ArrLst.get(j);//【措施id】从ArrayList交给一般数组
		        	resultSet = statement.executeQuery("select Massnahmebeschreibung from Massnahme where Massnahme_id = '"+massid_Arr[j]+"'");
		        	massbesch_ArrLst.add(sj + ". " +resultSet.getString("Massnahmebeschreibung"));
		        	massbesch_ArrLst_Dialog.add(sj + ". " +resultSet.getString("Massnahmebeschreibung") + "LessIsMore");
					massbesch_Arr[j] = massbesch_ArrLst.get(j);//【措施描述】从ArrayList交给一般数组
		        }
		        massbesch_ArrLst.add(" ");
		        massbesch_ArrLst_Dialog.add(" " + "LessIsMore" + "Xiong");
		        //此处及上面那些添加的字母串"LessIsMore"是为了后面DialogMassnahme中显示处理方便而添加的
			}
		}
		catch(SQLException e){
			System.err.println(e.getMessage());
			// if the error message is "out of memory", it probably means no database file is found
		}
		finally{
			try{
				resultSet.close();
				statement.close();
				connection.close(); 
			}
			catch (Exception e){
				System.err.println(e);// connection close failed.
			}
		}
		
		switch(fNr){
		case 1:{
			massZuFehler1 = massbesch_ArrLst;
			massZuFehler1Dialog = massbesch_ArrLst_Dialog;
			break;
			}
		case 2:{
			massZuFehler2 = massbesch_ArrLst;
			massZuFehler2Dialog = massbesch_ArrLst_Dialog;
			break;
			}
		case 3:{
			massZuFehler3 = massbesch_ArrLst;
			massZuFehler3Dialog = massbesch_ArrLst_Dialog;
			break;
			}
		case 4:{
			massZuFehler4 = massbesch_ArrLst;
			massZuFehler4Dialog = massbesch_ArrLst_Dialog;
			break;
			}
		case 5:{
			massZuFehler5 = massbesch_ArrLst;
			massZuFehler5Dialog = massbesch_ArrLst_Dialog;
			break;
			}
		}
		
		return urbesch_ArrLst_s;
	}

///////////////////////////////////↑↑↑Datenbank↑↑↑///////////////////////////////////////////////
	@FXML
	public void massnahmeChange(ActionEvent event){//btnNeinUnten的功能
		DialogMassnahme dm = new DialogMassnahme();
		dm.showAndWait();
	}
	@FXML
	public void saveToText(ActionEvent event){//btnJaUnten的功能
	//	System.out.println(massZuFehler1);//暂时空缺
	}
	
	public void creatTxtFile(File filename) throws IOException{
		if(!filename.exists()){
			filename.createNewFile();
		}
	}
/*	public void writeTxtFile() throws IOException{^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		String filein = newStr + "\r\n" +readStr + "\r\n";
		RandomAccessFile mm = null;
		
	}*/
	@FXML
	public void fehler_ReportInitial(){
		fehler1.clear();
		fehler2.clear();
		fehler3.clear();
		fehler4.clear();
		fehler5.clear();
	}
	@FXML
	public void ursache_ReportInitial(){
		ur_zu_Fehler1.getItems().clear();
		ur_zu_Fehler2.getItems().clear();
		ur_zu_Fehler3.getItems().clear();
		ur_zu_Fehler4.getItems().clear();
		ur_zu_Fehler5.getItems().clear();
	}
	@FXML
	public void mass_ReportInitial(){
		mass_zu_Fehler1.getItems().clear();
		mass_zu_Fehler2.getItems().clear();
		mass_zu_Fehler3.getItems().clear();
		mass_zu_Fehler4.getItems().clear();
		mass_zu_Fehler5.getItems().clear();
	}
}
